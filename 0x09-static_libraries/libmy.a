!<arch>
0-isupper.c/    0           0     0     644     244       `
#include "main.h"

/**
 * _isupper - function that checks for uppercase characters
 * @c: int type parameter
 * Return: 1 if uppercase, else 0
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     309       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 *
 * @s: pointer to string
 * @b: constant byte
 * @n: first bytes to change
 * Return: pointer to modified string
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;
	return (s);
}

0-strcat.c/     0           0     0     644     392       `
#include "main.h"

/**
 * _strcat - function to concatenate two strings and return a new string
 *
 * @dest: string 1
 * @src: string 2
 * Return: char pointer
 */
char *_strcat(char *dest, char *src)
{
	int i = 0, j = 0;
	char *p;

	while (*(dest + i) != '\0')
		i++;
	while (*(src + j) != '\0')
	{
		*(dest + i) = *(src + j);
		i++;
		j++;
	}
	*(dest + i) = '\0';
	p = dest;
	return (p);
}
100-atoi.c/     0           0     0     644     665       `
#include "main.h"

/**
 * _atoi - converts the first set of digits in a string to an integer,
 * taking into account the sign of the number
 * @s: string to be converted
 * Return: int containing the converted number
 */
int _atoi(char *s)
{
	int index, ind2;
	unsigned int res;
	int sign = 1;
	char now;

	index = 0;
	res = 0;
	while (*(s + index) != '\0')
	{
		now = *(s + index);
		if (now == '-')
		{
			sign *= -1;
		}
		if (now >= '0' && now <= '9')
		{
			ind2 = index;
			while (*(s + ind2) > 47 && *(s + ind2) < 58)
			{
				res = (res * 10) + *(s + ind2) - '0';
				ind2++;
			}
			break;
		}
		index++;
	}
	if (sign < 0)
		res *= sign;
	return (res);

}

1-isdigit.c/    0           0     0     644     189       `
#include "main.h"

/**
 * _isdigit - checks for digits
 * @c: parameter
 * Return: 0 or 1
 */

int _isdigit(int c)
{
	if (c >= 48 && c < 58)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     315       `
#include "main.h"

/**
 * _memcpy - copies memory area
 *
 * @dest: copy destination
 * @src: copy source
 * @n: bytes of memory to copy
 * Return: pointer to modified string
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}

1-strncat.c/    0           0     0     644     511       `
#include "main.h"

/**
 * _strncat - function to concatenate two strings and return a new string
 * with n elements of the appended string
 *
 * @dest: string 1
 * @src: string 2
 * @n: number of chars to include from appended string
 * Return: char pointer
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0, j = 0;
	char *p;

	while (*(dest + i) != '\0')
		i++;
	while (!(*(src + j) == '\0' || j == n))
	{
		*(dest + i) = *(src + j);
		i++;
		j++;
	}
	*(dest + i) = '\0';
	p = dest;
	return (p);
}

2-strchr.c/     0           0     0     644     336       `
#include "main.h"

/**
 * _strchr - function that locates a character in a string
 *
 * @s: string to be searched
 * @c: character to search for
 * Return: pointer to first occurence of c if it's there or NULL otherwise
 */
char *_strchr(char *s, char c)
{
	do {
		if (*s == c)
		{
			return (s);
		}
	} while (*s++);
	return (NULL);
}
2-strlen.c/     0           0     0     644     226       `
#include "main.h"

/**
 * _strlen - return the length of a given string
 *
 * @s: pointer to string to work on
 * Return: string
 */
int _strlen(char *s)
{
	int len = 0;

	while (*(s + len) != '\0')
		len++;

	return (len);
}
2-strncpy.c/    0           0     0     644     414       `
#include "main.h"

/**
 * _strncpy - function to copy string
 *
 * @dest: string to copy to
 * @src: string to copy from
 * @n: number of chars to copy
 * Return: char pointer
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i, j;

	for (i = 0; i < n; i++)
	{
		if (src[i] == '\0')
		{
			for (j = i; j < n && dest[j] != '\0'; j++)
				dest[j] = '\0';
			break;
		}
		dest[i] = src[i];
	}
	return (dest);
}
3-islower.c/    0           0     0     644     232       `
#include "main.h"

/**
* _islower - Return 1 if letter is lowercase, 0 if not.
* @c: char type letter
* Return: 1 if lowercase, 0 if not lowercase
*/
int _islower(int c)
{
	if (c > 96 && c < 123)
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     261       `
#include "main.h"

/**
 * _puts - print a given string to screen
 *
 * @str: passed pointer argument for string
 * Return: void
 */
void _puts(char *str)
{
	int len = 0;

	while (*(str + len) != '\0')
	{
		_putchar(*(str + len));
		len++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     297       `
#include "main.h"

/**
 * _strcmp - function to copy string
 *
 * @s1: first string to compare
 * @s2: second string to compare
 * Return: int
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s1 == *s2)
	{
		++s1;
		++s2;
	}
	return ((int)(unsigned char)(*s1) - (int)(unsigned char)(*s2));
}

3-strspn.c/     0           0     0     644     524       `
#include "main.h"

/**
 *  _strspn - gets the length of a prefix substring
 *
 *  @s: string to work on
 *  @accept: pattern to match against
 *  Return: unsigned int to how many initial bytes match the pattern
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j, len = 0, match = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				len++;
				break;
			}
		}
		if (len != 0)
			match++;
		if (match != len)
			return (len);
	}
	return (0);
}
4-isalpha.c/    0           0     0     644     283       `
#include "main.h"

/**
* _isalpha - Ceck if character is an alphabetic character.
* @c: type int character
* Return: 1 if letter, lowercase or uppercase, and 0 otherwise
*/
int _isalpha(int c)
{
		if ((c > 64 && c < 91) || (c > 96 && c < 123))
			return (1);
		else
			return (0);
}

4-strpbrk.c/    0           0     0     644     398       `
#include "main.h"

/**
 * _strpbrk - locates first occurence of any bytes from accept in s
 *
 * @s: string to work on
 * @accept: pattern to match against
 * Return: pointer to the first match
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
				return (s + i);
		}
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     621       `
#include "main.h"

/**
 * _strstr - finds the first occurrence of the substring needle
 * in the string haystack
 *
 * @haystack: string to work on
 * @needle: substring to match
 * Return: pointer to the first match or NULL
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j, match;

	if (*needle == '\0')
		return (haystack);
	for (i = 0; haystack[i] != '\0'; i++)
	{
		if (haystack[i] == *needle)
		{
			for (j = 1; needle[j] != '\0'; j++)
			{
				if (needle[j] != haystack[i + j])
				{
					match = 0;
					break;
				}
				match = 1;
			}
			if (match)
				return (haystack + i);
		}
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     211       `
#include "main.h"
/**
* _abs - compute the absolute value of an integer
* @n: int type number
* Return: absolute value of @n
*/
int _abs(int n)
{
	if (n < 0)
	{
		return (n * -1);
	}
	else
	{
		return (n);
	}
}

9-strcpy.c/     0           0     0     644     336       `
/**
 * *_strcpy - copies string to given memory location
 * @dest: where the string needs to be copied
 * @src: where the string is
 *
 * Return: char
 */
char *_strcpy(char *dest, char *src)
{
	int len = 0;

	while (*(src + len) != '\0')
	{
		*(dest + len) = *(src + len);
		len++;
	}
	*(dest + len) = *(src + len);

	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

